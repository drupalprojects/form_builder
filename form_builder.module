<?php
// $Id$

/**
 * @file form_builder.module
 * Generic form building framework and user interface.
 */

/**
 * Implementation of hook_menu().
 */
function form_builder_menu() {
  $items = array();

  $items['admin/build/form-builder/add'] = array(
    'title' => 'Add field',
    'description' => 'Add a field to a form.',
    'page callback' => 'form_builder_add_page',
    'access callback' => 'form_builder_field_access',
    'access arguments' => array('add', 4, 5, 6),
    'file' => 'includes/form_builder.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/build/form-builder/configure'] = array(
    'title' => 'Configure field',
    'description' => 'Configure a field within a form.',
    'page callback' => 'form_builder_configure_page',
    'access callback' => 'form_builder_field_access',
    'access arguments' => array('configure', 4, 5, 6),
    'file' => 'includes/form_builder.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/build/form-builder/remove'] = array(
    'title' => 'Remove field',
    'description' => 'Remove a field from a form.',
    'page callback' => 'form_builder_remove_page',
    'access callback' => 'form_builder_field_access',
    'access arguments' => array('remove', 4, 5, 6),
    'file' => 'includes/form_builder.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/build/form-builder/json'] = array(
    'title' => 'JSON representation',
    'description' => 'Display a form field as a JSON string.',
    'page callback' => 'form_builder_field_json',
    'access callback' => 'form_builder_field_access',
    'access arguments' => array('view', 4, 5, 6),
    'file' => 'includes/form_builder.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function form_builder_theme() {
  return array(
    'form_builder_preview' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/form_builder.admin.inc',
    ),
    'form_builder_element_prefix' => array(
      'arguments' => array('element' => NULL),
      'file' => 'includes/form_builder.admin.inc',
    ),
    'form_builder_element_suffix' => array(
      'arguments' => array('element' => NULL),
      'file' => 'includes/form_builder.admin.inc',
    ),
    'form_builder_empty_fieldset' => array(
      'arguments' => array(),
      'file' => 'includes/form_builder.admin.inc',
    ),
    'form_builder_field_configure' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/form_builder.admin.inc',
    ),
    'form_builder_add_field_block' => array(
      'arguments' => array('fields' => NULL, 'form_type' => NULL, 'form_id' => NULL),
      'file' => 'includes/form_builder.admin.inc',
    ),
  );
}

/**
 * Loader function to retrieve a form builder configuration array.
 *
 * @param $form_type
 *   The type of form being edited. Usually the name of the providing module.
 * @param $form_id
 *   The unique identifier for the form being edited with the type.
 */
function form_builder_load($form_type, $form_id) {
  $form = module_invoke_all('form_builder_load', $form_type, $form_id);

  // Convert the form array keys to #key properties for editing.
  return form_builder_add_keys($form);
}

/**
 * Helper function to convert array keys to #key properties.
 */
function form_builder_add_keys($form) {
  foreach (element_children($form) as $key) {
    $form[$key] = form_builder_add_keys($form[$key]);
    $form[$key]['#key'] = $key;
  }

  return $form;
}

/**
 * Implementation of hook_block().
 */
function form_builder_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['fields'] = array(
      'info' => t('Form builder fields'),
      'weight' => 0,
      'status' => 1,
      'region' => 'right'
    );

    return $blocks;
  }

  if ($op == 'view') {
    switch($delta) {
      case 'fields':
        if ($active = form_builder_active_form()) {
          $fields = form_builder_get_form_type($active['form_type']);
          $form = form_builder_cache_load($active['form_type'], $active['form_id']);
          $active_fields = form_builder_get_element_ids($form);
          foreach ($fields as $key => $field) {
            if ($field['unique'] && in_array($key, $active_fields)) {
              $fields[$key]['in_use'] = TRUE;
            }
          }
          return array(
            'subject' => t('Add a new field'),
            'content' => theme('form_builder_add_field_block', $fields, $active['form_type'], $active['form_id']),
          );
        }
        break;
    }
  }
}

/**
 * Access callback for field configuration, viewing, addition, and deletion.
 */
function form_builder_field_access($op, $form_type, $form_id, $element_id) {
  module_load_include('inc', 'form_builder', 'includes/form_builder.api');
  module_load_include('inc', 'form_builder', 'includes/form_builder.cache');
  $element = form_builder_cache_field_load($form_type, $form_id, $element_id);
  $access = FALSE;

  if ($op == 'add' || $op == 'view') {
    $access = TRUE;
  }
  if ($op == 'configure' && !empty($element['#form_builder']['configurable'])) {
    $access = TRUE;
  }
  if ($op == 'remove' && !empty($element['#form_builder']['removable'])) {
    $access = TRUE;
  }

  $module_accesses = module_invoke_all('form_builder_field_access', $op, $form_type, $form_id, $element);
  if (!empty($module_accesses)) {
    $access = array_pop($module_accesses);
  }

  return $access;

}

/**
 * Implementation of hook_form_builder_properties().
 */
function form_builder_form_builder_properties() {
  module_load_include('inc', 'form_builder', 'includes/form_builder.properties');

  return array(
    'key' => array(
      'form' => 'form_builder_property_key_form',
    ),
    'title' => array(
      'form' => 'form_builder_property_title_form',
    ),
    'description' => array(
      'form' => 'form_builder_property_description_form',
    ),
    'weight' => array(
      'form' => 'form_builder_property_weight_form',
    ),
    'default_value' => array(
      'form' => 'form_builder_property_default_value_form',
    ),
    'multiple' => array(
      'form' => 'form_builder_property_multiple_form',
      'submit' => array('form_builder_property_multiple_form_submit'),
    ),
    'required' => array(
      'form' => 'form_builder_property_required_form',
    ),
    'options' => array(
      'form' => 'form_builder_property_options_form',
      'submit' => array('form_builder_property_options_form_submit'),
    ),
    'size' => array(
      'form' => 'form_builder_property_size_form',
    ),
    'rows' => array(
      'form' => 'form_builder_property_rows_form',
    ),
    'cols' => array(
      'form' => 'form_builder_property_cols_form',
    ),
    'field_prefix' => array(
      'form' => 'form_builder_property_field_prefix_form',
    ),
    'field_suffix' => array(
      'form' => 'form_builder_property_field_suffix_form',
    ),
    'collapsible' => array(
      'form' => 'form_builder_property_collapsible_form',
    ),
    'collapsed' => array(
      'form' => 'form_builder_property_collapsed_form',
    ),
  );
}

/**
 * Implementation of hook_form_builder_property_groups().
 */
function form_builder_form_builder_property_groups() {
  return array(
    'default' => array(
      'weight' => 0,
      'title' => t('Properties'),
    ),
    'hidden' => array(
      'weight' => 100,
      'title' => t('Advanced'),
      'collapsed' => TRUE,
      'collapsible' => TRUE,
    ),
    'display' => array(
      'weight' => 1,
      'title' => t('Display'),
    ),
    'options' => array(
      'weight' => 2,
      'title' => t('Options'),
    ),
    'validation' => array(
      'weight' => 3,
      'title' => t('Validation'),
    ),
  );
}

/**
 * Static storage of the current type of form being edited (if any).
 *
 * @param $new_type_name
 *   The name of the type being edited. If this value is passed in, the static
 *   variable is set. If this parameter is ommited, the current type is
 *   returned. Pass in FALSE to reset current type.
 */
function form_builder_active_form($new_type = NULL, $new_id = NULL) {
  static $active_form = FALSE;

  if (isset($new_type) && isset($new_id)) {
    if (!$new_type && !$new_id) {
      $active_form = FALSE;
    }
    else {
      $active_form['form_type'] = $new_type;
      $active_form['form_id'] = $new_id;
    }
  }

  return $active_form;
}
