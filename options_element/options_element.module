<?php
// $Id$

/**
 * @file
 * Defines an "options" form element type for entering select list options.
 */

/**
 * Implementation of hook_elements().
 */
function options_element_elements() {
  $type = array();

  $type['options'] = array(
    '#input' => TRUE,
    '#process' => array('form_options_expand'),

    // The number of starting fields if empty.
    '#size' => 5,
    // Maxiumum number of values for this option list.
    '#limit' => 100,
    // Allow optgroups in this element? Set to FALSE for radios and checkboxes.
    '#optgroups' => TRUE,
    // The current options for the select list.
    '#options' => array(),
    // Possible values: 'numeric', 'associative', 'custom', or 'none'.
    // Numeric keys are auto-indexed by their line number and allow duplicate
    // values within the same list.
    // Associative keys are automatically mapped into key|value pairs, but
    // both the key and value are the same.
    // Custom keys are the same as associative, only users are allowed to
    // manually change the keys as well as the values.
    // Keys of type "none" do not allow any keys at all, they depend entirely
    // on the entered value and return an un-indexed array.
    '#key_type' => 'associative',
  );

  return $type;
}

/**
 * Implementation of hook_theme().
 */
function options_element_theme() {
  return array(
    'options' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Expand the "options" form element type.
 *
 * The "options" type is simply an enhanced textarea that makes it easier to
 * create key|value pairs and put items into optgroups.
 */
function form_options_expand($element) {
  $element['#options'] = isset($element['#options']) ? $element['#options'] : array();

  drupal_add_js(drupal_get_path('module', 'options_element') .'/options_element.js');

  $element['#tree'] = TRUE;

  if (!isset($element['options'])) {
    $element['options_field'] = array(
      '#type' => 'textarea',
      '#resizable' => FALSE,
      '#cols' => 60,
      '#rows' => 10,
      '#value' => isset($element['#options']) ? form_options_to_text($element['#options'], $element['#key_type']) : '',
      '#required' => isset($element['#required']) ? $element['#required'] : FALSE,
    );
  }

  if (!isset($element['default_value_field'])) {
    $element['default_value_field'] = array(
      '#title' => t('Default value'),
      '#type' => 'textfield',
      '#size' => 60,
      '#value' => isset($element['#default_value']) ? $element['#default_value'] : '',
    );
  }

  // Remove properties that will confuse the FAPI.
  unset($element['#options']);
  $element['#required'] = FALSE;

  return $element;
}

/**
 * Validate the "options" form element type.
 *
 * This function adjusts the value of the element from a text value to an array.
 */
function form_type_options_value($element, $edit = FALSE) {
  if ($edit === FALSE) {
     return array(
       'options' => isset($element['#options']) ? $element['#options'] : array(),
       'default_value' => isset($element['#default_value']) ? $element['#default_value'] : '',
     );
  }
  else {
    return array(
      'options' => form_options_from_text($edit['options_field'], $element['#key_type']),
      'default_value' => $edit['default_value_field'],
    );
  }
}

function theme_options($element) {
  $element['#collapsible'] = FALSE;
  unset($element['#value']);
  return theme('fieldset', $element);
}

function form_options_to_text($options, $key_type) {
  $output = '';
  foreach ($options as $key => $value) {
    // Convert groups.
    if (is_array($value)) {
      $output .= '<' . $key . '>' . "\n";
      foreach ($value as $subkey => $subvalue) {
        $output .= ($key_type != 'none' ? $subkey . '|' : '') . $subvalue . "\n";
      }
    }
    // Typical key|value pairs.
    else {
      $output .= $key . '|' . $value . "\n";
    }
  }

  return $output;
}


/**
 * Submit function for option lists for radios, checkboxes, or select lists.
 *
 * If the Key of the option is within < >, treat as an optgroup
 * 
 * <Group 1>
 *   creates an optgroup with the label "Group 1"
 * 
 * <>
 *   Unsets the current group, allowing items to be inserted at the root element.  
 */
function form_options_from_text($text, $key_type, $flat = FALSE) {
  $options = array();
  $rows = array_filter(explode("\n", trim($text)));
  $group = FALSE;
  foreach ($rows as $option) {
    $option = trim($option);
    $matches = array();

    // Check if this row is a group.
    if (preg_match('/^\<([^>]*)\>$/', $option, $matches)) {
      if ($matches[1] === '') {
        $group = FALSE;
      }
      elseif (!$flat) {
        $group = $matches[1];
      }
    }
    // Check if this row is a key|value pair.
    elseif ($key_type != 'none' && preg_match('/^([^|]+)\|(.*)$/', $option, $matches)) {
      $key = $matches[1];
      $value = $matches[2];
      if ($group !== FALSE) {
        $options[$group][$key] = $value;
      }
      else {
        $options[$key] = $value;
      }
    }
    // Check if this row is a straight value.
    else {
      if ($group !== FALSE) {
        if ($key_type != 'none') {
          $options[$group][$option] = $option;
        }
        else {
          $options[$group][] = $option;
        }
      }
      else {
        if ($key_type == 'associative' || $key_type == 'custom') {
          $options[$option] = $option;
        }
        else {
          $options[] = $option;
        }
      }
    }
  }

  return $options;
}